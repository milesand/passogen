pub const LOWERCASES: &[char] = &[
    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',
    't', 'u', 'v', 'w', 'x', 'y', 'z',
];
pub const UPPERCASES: &[char] = &[
    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
    'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
];
pub const NUMBERS: &[char] = &['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];

pub fn make_salt(domain: &[u8], username: &[u8], counter: u64) -> Vec<u8> {
    // "salt" generated by this function is a concantenation of:
    // * `domain`, but each byte that's zero is replaced by 2 zeroes.
    // * A zero byte.
    // * `username`.
    // * Big Endian representation of `counter`.
    // This should create a unique salt for any input triple.
    let mut salt = Vec::new();

    const SEP: u8 = 0;
    for &b in domain {
        if b == SEP {
            salt.push(SEP);
        }
        salt.push(b);
    }
    salt.push(SEP);

    for bs in [username, &counter.to_be_bytes()] {
        for &b in bs {
            salt.push(b);
        }
    }
    salt
}
